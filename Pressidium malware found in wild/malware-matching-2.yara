/*
Author: Spyros Maris
Date: 27/10/2023
GitHub: https://github.com/pressidium/pressidium-yara-rules
*/

/* ------------------------------ Rule Set ------------------------------ */
/* 
This rules set detects specific malicious PHP code snippets that found in some wordpress sites hosted in Pressidium.
*/

rule malicious_PHP_code_snippet4
{
    meta:
        author = "Spyros Maris"
        date = "27/10/2023"
        description = "This rule detects specific malicious PHP code snippets that found in some wordpress sites hosted in Pressidium."
        reference = "https://github.com/pressidium/pressidium-yara-rules"
    strings:
        $function_yq1 = "function yq1" wide ascii
        $array_access = /\[\d+\]/  wide ascii // Detects the usage of array access, e.g., $array[0]
        $string_obfuscation = "cF;" ."26@m*47 1bgp" ."akru" ."?vh#/nd3sL-<e)xo9y85(I'_" ."fi.EHl" ."t" wide ascii
        $eval_usage = /@\$yh6\[\d+\]\(\$kw13\);@include\(\$kw13\);@\$yh6\[\d+\]\(\$kw13\);exit\(\);/ wide ascii // Detects the usage of @\$yh6[0]($kw13);@include($kw13);@\$yh6[1]($kw13);exit();
        $cookie_post_access = /\$_COOKIE, \$_POST/ wide ascii 
        $suspicious_include = /@include\s*\("\057usr\/\167ww\/u\163ers\/[a-zA-Z0-9]+\/wp-i\156clud\145s\/bl\157cks\/[a-zA-Z0-9\-]+\/\.[a-f0-9]{8}\056ico"\);/ wide ascii // Detects the usage of @include("/usr/www/users/.../wp-includes/blocks/.../.[a-f0-9]{8}.ico");
    condition:
        one of them
}

rule malicious_PHP_code_snippet5
{
    meta:
        author = "Spyros Maris"
        date = "27/10/2023"
        description = "This rule detects specific malicious PHP code snippets that found in some wordpress sites hosted in Pressidium."
        reference = "https://github.com/pressidium/pressidium-yara-rules"
    strings:
        $obfuscation_chr = /chr\(\d+-\d+\)/  wide ascii  // Detects the usage of chr() function for obfuscation, e.g., chr(128-23)
        $obfuscation_hex = /\x[0-9a-fA-F]{2}/ wide ascii // Detects the usage of hexadecimal values for obfuscation, e.g., \x66
        $func_unserialize = "unserialize" wide ascii // Detects the use of unserialize function
        $func_base64_decode = "base64_decode" wide ascii
        $func_ini_set = "ini_set" wide ascii
        $func_file_put_contents = "file_put_contents" wide ascii
        $func_unlink = "unlink" wide ascii                       
        $func_file_io = /f[^ ]{0,10}p[^ ]{0,10}t[^ ]{0,10}_c[^ ]{0,10}t[^ ]{0,10}s/ wide ascii // Detects the usage of file_put_contents function or similar obfuscated function calls
        $xor_function = /for\s*\([^)]*\)\s*{\s*[^}]*\s*chr\s*\(.*\^.*ord\s*\(.*\)\s*\)\s*;?\s*}/ // Detects a function that iterates through two strings and applies XOR operation
    condition:
        (1 of ($obfuscation_chr, $obfuscation_hex) or
        2 of ($func_unserialize, $func_base64_decode, $func_ini_set, $func_file_io, $func_unlink)) and 
        $xor_function
}