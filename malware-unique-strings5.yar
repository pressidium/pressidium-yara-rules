/*
Author: Spyros Maris
Date: 29/10/2023
GitHub: https://github.com/pressidium/pressidium-yara-rules
*/

/* ------------------------------ Rule Set ------------------------------ */
/* 
This rules set detects specific malicious PHP code snippets that found in some wordpress sites hosted in Pressidium.
*/

include "Commons/Pressidium-common-encodings.yar" // rulenames: common_encoding_php , obfuscated_common_encodings_php 
include "Commons/Pressidium-common-eval-usage.yar" // rulenames: Detect_Eval_Usage
include "Commons/Pressidium-common-shell-commands.yar" // rulenames: common_unix_commands, common_uxin_commands_base64
include "Commons/Pressidium-common-PHP-functions.yar" // rulenames: common_PHP_functions, common_PHP_functions_base64_encoded
include "Commons/Pressidium-common-error-reporting.yar" //rulenames: common_disable_error_reporting


rule malicious_PHP_code_snippet13
{
    meta:
        author = "Spyros Maris"
        date = "29/10/2023"
        description = "This rule detects specific malicious PHP code snippets that found in some wordpress sites hosted in Pressidium"
        reference = "https://github.com/pressidium/pressidium-yara-rules"
	strings:
        $func_update = "function update( $new_instance, $old_instance )"
        $obfuscation_pattern1 = /\$s = "he" . "x2bin";/
        $obfuscation_pattern2 = /\$_ = array\(\$s,/
        $obfuscation_pattern3 = /;$x\d+=$x\d+\(\$_\[\d+\]\);/ 
        $include_pattern = /IncLude\(\$u\);/
        $halt_compiler = /__Halt_CompiLer/

    condition:
        1 of them
}

rule ObfuscatedPHPCode44 
{
    meta:
    	author = "Spyros Maris"
    	date = "29/10/2023"
    	description = "This rule detects specific malicious PHP code snippets that found in some wordpress sites hosted in Pressidium"
    	reference = "https://github.com/pressidium/pressidium-yara-rules"
    strings:
        $func_py1 = /function\s*\/\*.*\*\/py1\s*\(\s*\/\*.*\*\/\$\w+\s*\)/
        $array_pattern = /\$ue6\s*\[\s*\]\s*=\s*py1\s*\(\s*Array\s*\(/
        $concatenation = /9h#"\s*\.\s*"\*iHn-@\/2;l\?1vstp/
        $foreach_pattern = /foreach\s*\(\s*\$ue6\[8\]\s*\(\s*\$_COOKIE,\s*\$_POST\s*\)\s*as\s*\$ym14\s*=>\s*\$sm11\s*\)/
        $function_uf8 = /function\s*uf8\s*\(\s*\$ue6,\s*\$ym14\s*,\s*\$ip10\s*\)/
        $function_xz7 = /function\s*xz7\s*\(\s*\$ue6,\s*\$jf12\s*\)/
        $function_zv9 = /function\s*zv9\s*\(\s*\$ue6,\s*\$jf12\s*\)/
    condition:
        any of them and (1 of (common_encoding_php, obfuscated_common_encodings_php, Detect_Eval_Usage, common_unix_commands, common_uxin_commands_base64, common_PHP_functions, common_PHP_functions_base64_encoded, common_disable_error_reporting))
}

rule ObfuscatedPHPCode45 
{
	meta:
		author = "Spyros Maris"
		date = "29/10/2023"
		description = "This rule detects specific malicious PHP code snippets that found in some wordpress sites hosted in Pressidium"
		reference = "https://github.com/pressidium/pressidium-yara-rules"
	strings:
        $pattern1 = /"\\137" \. "\\103". "\\117\\117\\113"."\\111\\105"/
        $pattern2 = /if\s*\(	isset\s*\(\s*\$pEJV\s*\[\s*\(	89-68\)\s*\]\s*\)\s*\)/
        $pattern3 = /\$WLKk= \$pEJV \[ \( 90-	75\)\].\$pEJV\[	\( 81-	47\) \];/
        $pattern4 = /\$tkV= \$WLKk\(	\$pEJV\[ \( 95	-46\) 	\]. \$pEJV	\[ \( 90- 30\)  \] \)	;/
        $pattern5 = /include\(\$kwy\);/
        $pattern6 = /\$TJR\(	\$kwy \);/
    condition:
        any of them and (1 of (common_encoding_php, obfuscated_common_encodings_php, Detect_Eval_Usage, common_unix_commands, common_uxin_commands_base64, common_PHP_functions, common_PHP_functions_base64_encoded, common_disable_error_reporting))
}
